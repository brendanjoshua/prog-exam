#CATCH A BLAST
import turtle
import random
import os

# Screen setup
screen = turtle.Screen()
screen.title("Catch a Blast")
screen.bgcolor("black")
screen.setup(width=600, height=600)
screen.tracer(0)

# Border line if fullscreen
border_line = turtle.Turtle()
border_line.penup()
border_line.color("white")
border_line.goto(-300, 300)
border_line.pendown()
border_line.forward(600)
border_line.right(90)
border_line.forward(600)
border_line.right(90)
border_line.forward(600)
border_line.right(90)
border_line.forward(600)
border_line.penup()

# Score display
score_display = turtle.Turtle()
score_display.color("white")
score_display.penup()
score_display.hideturtle()
score_display.goto(0, 260)

# Welcome message
welcome_message = turtle.Turtle()
welcome_message.color("white")
welcome_message.penup()
welcome_message.hideturtle()
welcome_message.goto(0, 0)
welcome_message.write("Welcome to the Catch a Blast!\nYour goal is to catch the green objects falling from the sky,\nand don't catch the unhealthy red object, or it's game over!\nUse the left arrow or right arrow to move the paddle.\nPress Enter to start the game. Good luck!", align="center", font=("Arial", 14, "normal"))

leaderboard_file = "leaderboard.txt"

# Function to add a new player's score to the leaderboard file
def add_score_to_leaderboard(name, score):
    if not os.path.exists(leaderboard_file):
        with open(leaderboard_file, "w") as file:
            file.write("Name,Score\n")

    # Read existing leaderboard data
    leaderboard = read_leaderboard()

    # Check if the player's name already exists in the leaderboard
    for i, (player_name, player_score) in enumerate(leaderboard):
        if player_name == name:
            if score > player_score:
                leaderboard[i] = (name, score)
            break
    else:
        leaderboard.append((name, score))

    # Sort leaderboard by score in descending order
    leaderboard.sort(key=lambda x: x[1], reverse=True)

    # Write updated leaderboard data to the file
    with open(leaderboard_file, "w") as file:
        file.write("Name,Score\n")
        for player_name, player_score in leaderboard:
            file.write(f"{player_name},{player_score}\n")

# Function to read leaderboard data from the file
def read_leaderboard():
    if not os.path.exists(leaderboard_file):
        return []

    leaderboard = []
    with open(leaderboard_file, "r") as file:
        lines = file.readlines()
        for line in lines[1:]:
            name, score = line.strip().split(',')
            leaderboard.append((name, int(score)))
    return leaderboard

# Function to display the leaderboard with an option to remove a player's score
def display_leaderboard():
    leaderboard = read_leaderboard()
    if not leaderboard:
        print("Leaderboard is empty.")
    else:
        print("Leaderboard:")
        for i, (name, score) in enumerate(leaderboard, 1):
            print(f"{i}. {name}: {score}")
        
        choice = input("Enter the number corresponding to the player you want to remove, or press Enter to go back: ")
        if choice.isdigit():
            index = int(choice) - 1
            if 0 <= index < len(leaderboard):
                player_name, _ = leaderboard[index]
                confirm = input(f"Are you sure you want to remove {player_name}'s score? (yes/no): ").lower()
                if confirm == "yes":
                    del leaderboard[index]
                    update_leaderboard_file(leaderboard)
                    print(f"{player_name}'s score has been removed.")
                else:
                    print("Operation canceled.")
            else:
                print("Invalid choice.")
        elif choice.strip() == "":
            print("Returning to menu...")
        else:
            print("Invalid choice.")

# Function to update the leaderboard file after removing a player's score
def update_leaderboard_file(leaderboard):
    with open(leaderboard_file, "w") as file:
        file.write("Name,Score\n")
        for player_name, player_score in leaderboard:
            file.write(f"{player_name},{player_score}\n")

# Function to start the game
def start_game(player_name):
    welcome_message.clear()

    # paddle to catch the objects
    paddle = turtle.Turtle()
    paddle.shape("square")
    paddle.color("white")
    paddle.shapesize(stretch_wid=1, stretch_len=5)
    paddle.penup()
    paddle.goto(0, -250)

    score = 0
    delay = 20
    max_objects = 3

    objects_crossed_line = 0
    objects_crossed_line_threshold = 7 

    # Consecutive misses counter
    consecutive_misses = 0
    consecutive_miss_threshold = 7 

    # Speed milestone and multiplier
    speed_milestone = 100
    speed_multiplier = 2

    # Functions to move the paddle left and right
    def paddle_left():
        x = paddle.xcor()
        if x > -280:
            paddle.setx(x - 40)

    def paddle_right():
        x = paddle.xcor()
        if x < 280:
            paddle.setx(x + 40)

    # Keyboard bindings
    screen.listen()
    screen.onkeypress(paddle_left, "Left")
    screen.onkeypress(paddle_right, "Right")

    # Function to create a falling food object
    def create_falling_food():
        min_unhealthy_probability = 0.3
        remaining_probability = 1.0 - min_unhealthy_probability

        if len(falling_food_objects) < 2:
            if len([food_type for _, food_type in falling_food_objects if food_type == "healthy"]) == 0:
                food_type = "healthy"
            elif len([food_type for _, food_type in falling_food_objects if food_type == "unhealthy"]) == 0:
                food_type = "unhealthy"
        else:
            food_type = random.choices(["healthy", "unhealthy"], weights=[remaining_probability, min_unhealthy_probability])[0]

        # Create a turtle for the falling food
        falling_food = turtle.Turtle()
        falling_food.shape("circle")
        falling_food.color("green" if food_type == "healthy" else "red")
        falling_food.penup()
        falling_food.speed(0)
        falling_food.goto(random.randint(-290, 290), 290)
        falling_food.speed = random.uniform(20, 25)

        return falling_food, food_type

    falling_food_objects = []

    # Finish line turtle
    finish_line = turtle.Turtle()
    finish_line.shape("square")
    finish_line.color("white")
    finish_line.shapesize(stretch_wid=0.1, stretch_len=30)
    finish_line.penup()
    finish_line.goto(0, -300)

    # Main game loop
    while True:
        screen.update()

        # Move each falling food object
        for obj, food_type in falling_food_objects:
            obj.sety(obj.ycor() - obj.speed / 10)

            # Check if the food object is caught
            if obj.ycor() < -240 and paddle.xcor() - 40 < obj.xcor() < paddle.xcor() + 40:
                obj.goto(random.randint(-290, 290), 290)

                if food_type == "unhealthy":
                    end_game(player_name, score, "You caught an unhealthy object. Bad for you.")
                    return
                else:
                    score += 10
                    consecutive_misses = 0

                # Reset the objects crossed line counter when a food object is caught
                objects_crossed_line = 0
                print(f"Score: {score}")

                # Update the score display
                score_display.clear()
                score_display.write(f"Score: {score}", align="center", font=("Arial", 16, "normal"))

                # Check for speed milestone
                if score >= speed_milestone:
                    speed_milestone += 100
                    for obj, _ in falling_food_objects:
                        obj.speed += 10

                # Check for score milestones and add falling food objects accordingly
                if score >= 100 and len(falling_food_objects) < max_objects + 1:
                    for _ in range(2):
                        falling_food_objects.append(create_falling_food())

                if score >= 200 and len(falling_food_objects) < max_objects + 2:
                    for _ in range(3): 
                        falling_food_objects.append(create_falling_food())

                if score >= 300 and len(falling_food_objects) < max_objects + 3:
                    for _ in range(4): 
                        falling_food_objects.append(create_falling_food())

            # Check if the food object missed the paddle
            if obj.ycor() < -290:
                obj.goto(random.randint(-290, 290), 290)
                consecutive_misses += 1

            # Check if the food object crosses the line
            if obj.ycor() < -290 and obj.ycor() > -310:
                objects_crossed_line += 1

        if objects_crossed_line >= objects_crossed_line_threshold:
            end_game(player_name, score, "Don't waste anything in life.")
            break

        # Check if the player misses seven consecutive falling food objects
        if consecutive_misses >= consecutive_miss_threshold:
            end_game(player_name, score, "Play the game, what are you doing?")
            break

        # Create a new falling food object with a certain probability
        if len(falling_food_objects) < max_objects and random.random() < 0.02:
            falling_food_objects.append(create_falling_food())

        # Check if the player closes the window
        if turtle.Screen()._root is None:
            break

        turtle.ontimer(None, delay)  # Adjust the delay based on the current game speed

# Function to end the game
def end_game(player_name, final_score, end_message):
    score_display.clear()
    score_display.goto(0, 0)
    score_display.write("Game Over! {}\nYour final score is: {}".format(end_message, final_score), align="center", font=("Arial", 16, "normal"))
    add_score_to_leaderboard(player_name, final_score)  # Add player's score to leaderboard
    turtle.exitonclick()

# Function to show the menu and handle user input
def show_menu():
    player_name = turtle.textinput("Player Name", "Please enter your name:")
    if player_name is None or player_name.strip() == "":
        print("Invalid name. Please try again.")
        return
    
    while True:
        choice = turtle.numinput("Menu", f"Welcome, {player_name}!\nMenu:\n1. Play Game\n2. View Leaderboard\n3. Remove Score\n4. Exit Game\nEnter your choice:", minval=1, maxval=4)
        if choice == 1:
            print("Starting game...")
            # Call the function to start the game
            start_game(player_name)
        elif choice == 2:
            print("Viewing leaderboard...")
            display_leaderboard()
        elif choice == 3:
            print("Removing player's score...")
            display_leaderboard()
        elif choice == 4:
            print("Exiting game...")
            # Save leaderboard data before exiting
            break
        else:
            print("Invalid choice. Please try again.")

# Keyboard bindings to show the menu
screen.listen()
screen.onkeypress(show_menu, "Return")

# Start the main event loop
turtle.mainloop()
